{
	"info": {
		"_postman_id": "reqres-api-tests",
		"name": "ReqRes API - Authentication & User Management",
		"description": "Comprehensive test suite for ReqRes API including authentication, user management, and pagination",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains token and id', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"",
									"pm.test('Token is not empty', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.not.be.empty;",
									"});",
									"",
									"// Store token for subsequent requests",
									"pm.environment.set('authToken', pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/register",
							"host": ["{{baseUrl}}"],
							"path": ["register"]
						}
					}
				},
				{
					"name": "Register - Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message is present', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Missing password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/register",
							"host": ["{{baseUrl}}"],
							"path": ["register"]
						}
					}
				},
				{
					"name": "Login - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"});",
									"",
									"pm.test('Token format is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Update stored token",
									"pm.environment.set('authToken', pm.response.json().token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": ["{{baseUrl}}"],
							"path": ["login"]
						}
					}
				},
				{
					"name": "Login - Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message is present', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Missing email or username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"cityslicka\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": ["{{baseUrl}}"],
							"path": ["login"]
						}
					}
				}
			]
		},
		{
			"name": "Users Management",
			"item": [
				{
					"name": "Get Users - Page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has pagination data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData).to.have.property('per_page');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('total_pages');",
									"    pm.expect(jsonData).to.have.property('data');",
									"});",
									"",
									"pm.test('Current page is 1', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.page).to.eql(1);",
									"});",
									"",
									"pm.test('Data array contains users', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test('Each user has required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(function(user) {",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user).to.have.property('first_name');",
									"        pm.expect(user).to.have.property('last_name');",
									"        pm.expect(user).to.have.property('avatar');",
									"    });",
									"});",
									"",
									"pm.test('Avatar URLs are valid', function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(function(user) {",
									"        pm.expect(user.avatar).to.match(/^https?:\\/\\/.+/);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=1",
							"host": ["{{baseUrl}}"],
							"path": ["users"],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					}
				},
				{
					"name": "Get Users - Page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Current page is 2', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.page).to.eql(2);",
									"});",
									"",
									"pm.test('Has support info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('support');",
									"    pm.expect(jsonData.support).to.have.property('url');",
									"    pm.expect(jsonData.support).to.have.property('text');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=2",
							"host": ["{{baseUrl}}"],
							"path": ["users"],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					}
				},
				{
					"name": "Get Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('first_name');",
									"    pm.expect(jsonData.data).to.have.property('last_name');",
									"});",
									"",
									"pm.test('User ID matches request', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.eql(2);",
									"});",
									"",
									"pm.test('Email format is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": ["{{baseUrl}}"],
							"path": ["users", "2"]
						}
					}
				},
				{
					"name": "Get Non-existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Response body is empty object', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/23",
							"host": ["{{baseUrl}}"],
							"path": ["users", "23"]
						}
					}
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains created user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('job');",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"});",
									"",
									"pm.test('Created user data matches request', function () {",
									"    const jsonData = pm.response.json();",
									"    const requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.name).to.eql(requestData.name);",
									"    pm.expect(jsonData.job).to.eql(requestData.job);",
									"});",
									"",
									"pm.test('CreatedAt is valid timestamp', function () {",
									"    const jsonData = pm.response.json();",
									"    const createdAt = new Date(jsonData.createdAt);",
									"    pm.expect(createdAt).to.be.a('date');",
									"    pm.expect(createdAt.getTime()).to.be.greaterThan(0);",
									"});",
									"",
									"// Store created user ID",
									"pm.environment.set('createdUserId', pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"job\": \"Software Engineer\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Update User (PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains updated data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('job');",
									"    pm.expect(jsonData).to.have.property('updatedAt');",
									"});",
									"",
									"pm.test('Updated data matches request', function () {",
									"    const jsonData = pm.response.json();",
									"    const requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.name).to.eql(requestData.name);",
									"    pm.expect(jsonData.job).to.eql(requestData.job);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Smith\",\n    \"job\": \"Senior Software Engineer\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": ["{{baseUrl}}"],
							"path": ["users", "2"]
						}
					}
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('Response body is empty', function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": ["{{baseUrl}}"],
							"path": ["users", "2"]
						}
					}
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "Get All Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains resource data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test('Each resource has required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(function(resource) {",
									"        pm.expect(resource).to.have.property('id');",
									"        pm.expect(resource).to.have.property('name');",
									"        pm.expect(resource).to.have.property('year');",
									"        pm.expect(resource).to.have.property('color');",
									"        pm.expect(resource).to.have.property('pantone_value');",
									"    });",
									"});",
									"",
									"pm.test('Color values are valid hex codes', function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(function(resource) {",
									"        pm.expect(resource.color).to.match(/^#[0-9A-Fa-f]{6}$/);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/unknown",
							"host": ["{{baseUrl}}"],
							"path": ["unknown"]
						}
					}
				}
			]
		},
		{
			"name": "Delayed Response",
			"item": [
				{
					"name": "3 Second Delay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is approximately 3 seconds', function () {",
									"    pm.expect(pm.response.responseTime).to.be.within(2800, 3500);",
									"});",
									"",
									"pm.test('Response contains data despite delay', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?delay=3",
							"host": ["{{baseUrl}}"],
							"path": ["users"],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api"
		}
	]
}